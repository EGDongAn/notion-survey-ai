import type { Question } from '../types';
import { QuestionType } from '../types';

export const createGoogleAppsScript = (
  questions: Question[],
  formTitle: string,
  notificationEmails: string[],
  options: { mode: 'create'; driveFolderId?: string } | { mode: 'update'; formId: string }
): string => {
  const sanitizedTitle = formTitle.replace(/'/g, "\\'");
  const hasEmails = notificationEmails && notificationEmails.length > 0;
  const recipients = notificationEmails.map(email => email.replace(/'/g, "\\'")).join(',');

  const triggerSetup = hasEmails
    ? `
/**
 * Deletes all existing triggers for a specific function in the current project.
 * This prevents duplicate notifications if the script is updated.
 */
function deleteTriggersForFunction(functionName) {
  var triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(function(trigger) {
    if (trigger.getHandlerFunction() === functionName) {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  Logger.log('Deleted existing triggers for ' + functionName);
}

/**
 * Creates a trigger that runs the 'onFormSubmit' function when a form response is submitted.
 */
function createSubmitTrigger(form) {
  // First, delete any old triggers to prevent duplicates.
  deleteTriggersForFunction('onFormSubmit');
  
  // Then, create the new trigger.
  ScriptApp.newTrigger('onFormSubmit')
    .forForm(form)
    .onFormSubmit()
    .create();
  Logger.log('Created new "onFormSubmit" trigger.');
}

/**
 * Sends an email notification when a form response is submitted.
 * @param {Object} e The event object.
 */
function onFormSubmit(e) {
  try {
    const formResponse = e.response;
    const itemResponses = formResponse.getItemResponses();
    let emailBody = 'New response received for "' + e.source.getTitle() + '".\\n\\n';
    
    itemResponses.forEach(function(itemResponse) {
      emailBody += itemResponse.getItem().getTitle() + ': ' + itemResponse.getResponse() + '\\n';
    });
    
    const recipients = '${recipients}';
    const subject = 'New Form Response: ' + e.source.getTitle();
    
    if (recipients) {
        MailApp.sendEmail(recipients, subject, emailBody);
    }
  } catch (error) {
    Logger.log('Error in onFormSubmit: ' + error.toString());
  }
}
`
    : '';

  if (options.mode === 'create') {
    const createItemsCode = questions.map(q => {
      const sanitizedQuestionText = q.questionText.replace(/'/g, "\\'");
      let itemCode = '';

      switch (q.type) {
        case QuestionType.TEXT:
          itemCode = `form.addTextItem().setTitle('${sanitizedQuestionText}')`;
          break;
        case QuestionType.PARAGRAPH_TEXT:
          itemCode = `form.addParagraphTextItem().setTitle('${sanitizedQuestionText}')`;
          break;
        case QuestionType.MULTIPLE_CHOICE:
          itemCode = `form.addMultipleChoiceItem().setTitle('${sanitizedQuestionText}')`;
          if (q.options && q.options.length > 0) {
            const choices = q.options.map(opt => `'${opt.replace(/'/g, "\\'")}'`).join(', ');
            itemCode += `.setChoiceValues([${choices}])`;
          }
          break;
        case QuestionType.CHECKBOX:
          itemCode = `form.addCheckboxItem().setTitle('${sanitizedQuestionText}')`;
          if (q.options && q.options.length > 0) {
            const choices = q.options.map(opt => `'${opt.replace(/'/g, "\\'")}'`).join(', ');
            itemCode += `.setChoiceValues([${choices}])`;
          }
          break;
        case QuestionType.SCALE:
          const scaleMax = (q.options && parseInt(q.options[0], 10)) || 5;
          itemCode = `form.addScaleItem().setTitle('${sanitizedQuestionText}').setBounds(1, ${scaleMax})`;
          break;
        case QuestionType.DATE:
          itemCode = `form.addDateItem().setTitle('${sanitizedQuestionText}')`;
          break;
        case QuestionType.TIME:
          itemCode = `form.addTimeItem().setTitle('${sanitizedQuestionText}')`;
          break;
        default:
          return '';
      }
      
      if (q.isRequired) {
        itemCode += '.setRequired(true)';
      }
      
      return `  ${itemCode};`;
    }).join('\n');

    const moveFileCode = options.driveFolderId
      ? `
  try {
    var folder = DriveApp.getFolderById('${options.driveFolderId.replace(/'/g, "\\'")}');
    var formFile = DriveApp.getFileById(form.getId());
    folder.addFile(formFile);
    DriveApp.getRootFolder().removeFile(formFile);
    Logger.log('Successfully moved form to folder: ' + folder.getName());
  } catch (e) {
    Logger.log('Could not move form to folder ID "${options.driveFolderId.replace(/'/g, "\\'")}": ' + e.toString() + '.');
  }
`
      : '';

    return `
function createMyForm() {
  var form = FormApp.create('${sanitizedTitle}');
  form.setDescription('This form was generated by Formulate AI.');
  Logger.log('Created form: ' + form.getTitle());
  
${createItemsCode}
  
  Logger.log('Added all questions to the form.');

  // Create and link a response spreadsheet
  try {
    var spreadsheet = SpreadsheetApp.create('${sanitizedTitle} (Responses)');
    form.setDestination(FormApp.DestinationType.SPREADSHEET, spreadsheet.getId());
    Logger.log('Created and linked response spreadsheet: ' + spreadsheet.getUrl());
  } catch(e) {
    Logger.log('Could not create response spreadsheet: ' + e.toString());
  }

${moveFileCode}

  ${hasEmails ? 'createSubmitTrigger(form);' : ''}
  
  var publishedUrl = form.getPublishedUrl();
  var editUrl = form.getEditUrl();
  Logger.log('Form created! Public URL: ' + publishedUrl);
  Logger.log('Editor URL: ' + editUrl);
  return { publishedUrl: publishedUrl, editUrl: editUrl };
}
${triggerSetup}
`;
  } else { // Update mode
    return `
function updateMyForm() {
  var formId = '${options.formId}';
  try {
    var form = FormApp.openById(formId);
    Logger.log('Successfully opened form to update: ' + form.getTitle());
    
    // Check if response spreadsheet exists, create if not
    try {
      var destId = form.getDestinationId();
      if (destId) {
        var sheet = SpreadsheetApp.openById(destId);
        Logger.log('Form already has response spreadsheet: ' + sheet.getUrl());
      }
    } catch(e) {
      // No destination spreadsheet exists, create one
      Logger.log('No response spreadsheet found, creating one...');
      var spreadsheet = SpreadsheetApp.create(form.getTitle() + ' (Responses)');
      form.setDestination(FormApp.DestinationType.SPREADSHEET, spreadsheet.getId());
      Logger.log('Created and linked response spreadsheet: ' + spreadsheet.getUrl());
    }
    
    ${hasEmails ? 'createSubmitTrigger(form);' : `Logger.log('No notification emails provided, skipping trigger setup.'); deleteTriggersForFunction('onFormSubmit');`}
    
    var editUrl = form.getEditUrl();
    Logger.log('Form update complete. Editor URL: ' + editUrl);
    return { publishedUrl: form.getPublishedUrl(), editUrl: editUrl };
  } catch(e) {
    var errorMsg = 'Failed to update form with ID "' + formId + '". Error: ' + e.toString();
    Logger.log(errorMsg);
    throw new Error(errorMsg);
  }
}
${triggerSetup}
`;
  }
};
